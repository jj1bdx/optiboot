
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007e34  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000234  00007c00  00007c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000cb4  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e3f  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007c00 <main>:
    7c00:	1f 92       	push	r1
    7c02:	cd b7       	in	r28, 0x3d	; 61
    7c04:	de b7       	in	r29, 0x3e	; 62
    7c06:	11 24       	eor	r1, r1
    7c08:	84 b7       	in	r24, 0x34	; 52
    7c0a:	14 be       	out	0x34, r1	; 52
    7c0c:	98 2f       	mov	r25, r24
    7c0e:	9d 70       	andi	r25, 0x0D	; 13
    7c10:	09 f0       	breq	.+2      	; 0x7c14 <main+0x14>
    7c12:	f4 d0       	rcall	.+488    	; 0x7dfc <appStart>
    7c14:	85 e0       	ldi	r24, 0x05	; 5
    7c16:	80 93 81 00 	sts	0x0081, r24
    7c1a:	82 e0       	ldi	r24, 0x02	; 2
    7c1c:	80 93 c0 00 	sts	0x00C0, r24
    7c20:	88 e1       	ldi	r24, 0x18	; 24
    7c22:	80 93 c1 00 	sts	0x00C1, r24
    7c26:	86 e0       	ldi	r24, 0x06	; 6
    7c28:	80 93 c2 00 	sts	0x00C2, r24
    7c2c:	80 e1       	ldi	r24, 0x10	; 16
    7c2e:	80 93 c4 00 	sts	0x00C4, r24
    7c32:	8e e0       	ldi	r24, 0x0E	; 14
    7c34:	ce d0       	rcall	.+412    	; 0x7dd2 <watchdogConfig>
    7c36:	25 9a       	sbi	0x04, 5	; 4
    7c38:	86 e0       	ldi	r24, 0x06	; 6
    7c3a:	20 e3       	ldi	r18, 0x30	; 48
    7c3c:	3c ef       	ldi	r19, 0xFC	; 252
    7c3e:	91 e0       	ldi	r25, 0x01	; 1
    7c40:	30 93 85 00 	sts	0x0085, r19
    7c44:	20 93 84 00 	sts	0x0084, r18
    7c48:	96 bb       	out	0x16, r25	; 22
    7c4a:	b0 9b       	sbis	0x16, 0	; 22
    7c4c:	fe cf       	rjmp	.-4      	; 0x7c4a <main+0x4a>
    7c4e:	1d 9a       	sbi	0x03, 5	; 3
    7c50:	a8 95       	wdr
    7c52:	81 50       	subi	r24, 0x01	; 1
    7c54:	a9 f7       	brne	.-22     	; 0x7c40 <main+0x40>
    7c56:	61 2c       	mov	r6, r1
    7c58:	71 2c       	mov	r7, r1
    7c5a:	03 e0       	ldi	r16, 0x03	; 3
    7c5c:	ff 24       	eor	r15, r15
    7c5e:	f3 94       	inc	r15
    7c60:	35 e0       	ldi	r19, 0x05	; 5
    7c62:	e3 2e       	mov	r14, r19
    7c64:	41 e1       	ldi	r20, 0x11	; 17
    7c66:	d4 2e       	mov	r13, r20
    7c68:	a8 d0       	rcall	.+336    	; 0x7dba <getch>
    7c6a:	81 34       	cpi	r24, 0x41	; 65
    7c6c:	79 f4       	brne	.+30     	; 0x7c8c <main+0x8c>
    7c6e:	a5 d0       	rcall	.+330    	; 0x7dba <getch>
    7c70:	89 83       	std	Y+1, r24	; 0x01
    7c72:	b5 d0       	rcall	.+362    	; 0x7dde <verifySpace>
    7c74:	89 81       	ldd	r24, Y+1	; 0x01
    7c76:	82 38       	cpi	r24, 0x82	; 130
    7c78:	11 f4       	brne	.+4      	; 0x7c7e <main+0x7e>
    7c7a:	82 e0       	ldi	r24, 0x02	; 2
    7c7c:	05 c0       	rjmp	.+10     	; 0x7c88 <main+0x88>
    7c7e:	81 38       	cpi	r24, 0x81	; 129
    7c80:	11 f4       	brne	.+4      	; 0x7c86 <main+0x86>
    7c82:	86 e0       	ldi	r24, 0x06	; 6
    7c84:	01 c0       	rjmp	.+2      	; 0x7c88 <main+0x88>
    7c86:	83 e0       	ldi	r24, 0x03	; 3
    7c88:	91 d0       	rcall	.+290    	; 0x7dac <putch>
    7c8a:	8d c0       	rjmp	.+282    	; 0x7da6 <main+0x1a6>
    7c8c:	82 34       	cpi	r24, 0x42	; 66
    7c8e:	11 f4       	brne	.+4      	; 0x7c94 <main+0x94>
    7c90:	84 e1       	ldi	r24, 0x14	; 20
    7c92:	03 c0       	rjmp	.+6      	; 0x7c9a <main+0x9a>
    7c94:	85 34       	cpi	r24, 0x45	; 69
    7c96:	19 f4       	brne	.+6      	; 0x7c9e <main+0x9e>
    7c98:	85 e0       	ldi	r24, 0x05	; 5
    7c9a:	a9 d0       	rcall	.+338    	; 0x7dee <getNch>
    7c9c:	84 c0       	rjmp	.+264    	; 0x7da6 <main+0x1a6>
    7c9e:	85 35       	cpi	r24, 0x55	; 85
    7ca0:	49 f4       	brne	.+18     	; 0x7cb4 <main+0xb4>
    7ca2:	8b d0       	rcall	.+278    	; 0x7dba <getch>
    7ca4:	18 2f       	mov	r17, r24
    7ca6:	89 d0       	rcall	.+274    	; 0x7dba <getch>
    7ca8:	61 2e       	mov	r6, r17
    7caa:	71 2c       	mov	r7, r1
    7cac:	78 2a       	or	r7, r24
    7cae:	66 0c       	add	r6, r6
    7cb0:	77 1c       	adc	r7, r7
    7cb2:	78 c0       	rjmp	.+240    	; 0x7da4 <main+0x1a4>
    7cb4:	86 35       	cpi	r24, 0x56	; 86
    7cb6:	21 f4       	brne	.+8      	; 0x7cc0 <main+0xc0>
    7cb8:	84 e0       	ldi	r24, 0x04	; 4
    7cba:	99 d0       	rcall	.+306    	; 0x7dee <getNch>
    7cbc:	80 e0       	ldi	r24, 0x00	; 0
    7cbe:	e4 cf       	rjmp	.-56     	; 0x7c88 <main+0x88>
    7cc0:	84 36       	cpi	r24, 0x64	; 100
    7cc2:	09 f0       	breq	.+2      	; 0x7cc6 <main+0xc6>
    7cc4:	45 c0       	rjmp	.+138    	; 0x7d50 <main+0x150>
    7cc6:	79 d0       	rcall	.+242    	; 0x7dba <getch>
    7cc8:	78 d0       	rcall	.+240    	; 0x7dba <getch>
    7cca:	18 2f       	mov	r17, r24
    7ccc:	76 d0       	rcall	.+236    	; 0x7dba <getch>
    7cce:	98 2e       	mov	r9, r24
    7cd0:	a1 2c       	mov	r10, r1
    7cd2:	bb 24       	eor	r11, r11
    7cd4:	b3 94       	inc	r11
    7cd6:	71 d0       	rcall	.+226    	; 0x7dba <getch>
    7cd8:	f5 01       	movw	r30, r10
    7cda:	81 93       	st	Z+, r24
    7cdc:	5f 01       	movw	r10, r30
    7cde:	1e 13       	cpse	r17, r30
    7ce0:	fa cf       	rjmp	.-12     	; 0x7cd6 <main+0xd6>
    7ce2:	7d d0       	rcall	.+250    	; 0x7dde <verifySpace>
    7ce4:	f5 e4       	ldi	r31, 0x45	; 69
    7ce6:	9f 12       	cpse	r9, r31
    7ce8:	10 c0       	rjmp	.+32     	; 0x7d0a <main+0x10a>
    7cea:	43 01       	movw	r8, r6
    7cec:	a1 2c       	mov	r10, r1
    7cee:	bb 24       	eor	r11, r11
    7cf0:	b3 94       	inc	r11
    7cf2:	1a 15       	cp	r17, r10
    7cf4:	09 f4       	brne	.+2      	; 0x7cf8 <main+0xf8>
    7cf6:	57 c0       	rjmp	.+174    	; 0x7da6 <main+0x1a6>
    7cf8:	f5 01       	movw	r30, r10
    7cfa:	61 91       	ld	r22, Z+
    7cfc:	5f 01       	movw	r10, r30
    7cfe:	c4 01       	movw	r24, r8
    7d00:	8b d0       	rcall	.+278    	; 0x7e18 <__eewr_byte_m328p>
    7d02:	ff ef       	ldi	r31, 0xFF	; 255
    7d04:	8f 1a       	sub	r8, r31
    7d06:	9f 0a       	sbc	r9, r31
    7d08:	f4 cf       	rjmp	.-24     	; 0x7cf2 <main+0xf2>
    7d0a:	f3 01       	movw	r30, r6
    7d0c:	07 bf       	out	0x37, r16	; 55
    7d0e:	e8 95       	spm
    7d10:	07 b6       	in	r0, 0x37	; 55
    7d12:	00 fc       	sbrc	r0, 0
    7d14:	fd cf       	rjmp	.-6      	; 0x7d10 <main+0x110>
    7d16:	a3 01       	movw	r20, r6
    7d18:	a0 e0       	ldi	r26, 0x00	; 0
    7d1a:	b1 e0       	ldi	r27, 0x01	; 1
    7d1c:	2c 91       	ld	r18, X
    7d1e:	12 96       	adiw	r26, 0x02	; 2
    7d20:	cd 01       	movw	r24, r26
    7d22:	01 97       	sbiw	r24, 0x01	; 1
    7d24:	fc 01       	movw	r30, r24
    7d26:	80 81       	ld	r24, Z
    7d28:	30 e0       	ldi	r19, 0x00	; 0
    7d2a:	38 2b       	or	r19, r24
    7d2c:	fa 01       	movw	r30, r20
    7d2e:	09 01       	movw	r0, r18
    7d30:	f7 be       	out	0x37, r15	; 55
    7d32:	e8 95       	spm
    7d34:	11 24       	eor	r1, r1
    7d36:	4e 5f       	subi	r20, 0xFE	; 254
    7d38:	5f 4f       	sbci	r21, 0xFF	; 255
    7d3a:	1a 13       	cpse	r17, r26
    7d3c:	ef cf       	rjmp	.-34     	; 0x7d1c <main+0x11c>
    7d3e:	f3 01       	movw	r30, r6
    7d40:	e7 be       	out	0x37, r14	; 55
    7d42:	e8 95       	spm
    7d44:	07 b6       	in	r0, 0x37	; 55
    7d46:	00 fc       	sbrc	r0, 0
    7d48:	fd cf       	rjmp	.-6      	; 0x7d44 <main+0x144>
    7d4a:	d7 be       	out	0x37, r13	; 55
    7d4c:	e8 95       	spm
    7d4e:	2b c0       	rjmp	.+86     	; 0x7da6 <main+0x1a6>
    7d50:	84 37       	cpi	r24, 0x74	; 116
    7d52:	d9 f4       	brne	.+54     	; 0x7d8a <main+0x18a>
    7d54:	32 d0       	rcall	.+100    	; 0x7dba <getch>
    7d56:	31 d0       	rcall	.+98     	; 0x7dba <getch>
    7d58:	18 2f       	mov	r17, r24
    7d5a:	2f d0       	rcall	.+94     	; 0x7dba <getch>
    7d5c:	89 83       	std	Y+1, r24	; 0x01
    7d5e:	3f d0       	rcall	.+126    	; 0x7dde <verifySpace>
    7d60:	89 81       	ldd	r24, Y+1	; 0x01
    7d62:	53 01       	movw	r10, r6
    7d64:	85 34       	cpi	r24, 0x45	; 69
    7d66:	51 f4       	brne	.+20     	; 0x7d7c <main+0x17c>
    7d68:	16 0d       	add	r17, r6
    7d6a:	c5 01       	movw	r24, r10
    7d6c:	4d d0       	rcall	.+154    	; 0x7e08 <__eerd_byte_m328p>
    7d6e:	1e d0       	rcall	.+60     	; 0x7dac <putch>
    7d70:	ff ef       	ldi	r31, 0xFF	; 255
    7d72:	af 1a       	sub	r10, r31
    7d74:	bf 0a       	sbc	r11, r31
    7d76:	1a 11       	cpse	r17, r10
    7d78:	f8 cf       	rjmp	.-16     	; 0x7d6a <main+0x16a>
    7d7a:	15 c0       	rjmp	.+42     	; 0x7da6 <main+0x1a6>
    7d7c:	f5 01       	movw	r30, r10
    7d7e:	85 91       	lpm	r24, Z+
    7d80:	5f 01       	movw	r10, r30
    7d82:	14 d0       	rcall	.+40     	; 0x7dac <putch>
    7d84:	11 50       	subi	r17, 0x01	; 1
    7d86:	d1 f7       	brne	.-12     	; 0x7d7c <main+0x17c>
    7d88:	0e c0       	rjmp	.+28     	; 0x7da6 <main+0x1a6>
    7d8a:	85 37       	cpi	r24, 0x75	; 117
    7d8c:	39 f4       	brne	.+14     	; 0x7d9c <main+0x19c>
    7d8e:	27 d0       	rcall	.+78     	; 0x7dde <verifySpace>
    7d90:	8e e1       	ldi	r24, 0x1E	; 30
    7d92:	0c d0       	rcall	.+24     	; 0x7dac <putch>
    7d94:	85 e9       	ldi	r24, 0x95	; 149
    7d96:	0a d0       	rcall	.+20     	; 0x7dac <putch>
    7d98:	8f e0       	ldi	r24, 0x0F	; 15
    7d9a:	76 cf       	rjmp	.-276    	; 0x7c88 <main+0x88>
    7d9c:	81 35       	cpi	r24, 0x51	; 81
    7d9e:	11 f4       	brne	.+4      	; 0x7da4 <main+0x1a4>
    7da0:	88 e0       	ldi	r24, 0x08	; 8
    7da2:	17 d0       	rcall	.+46     	; 0x7dd2 <watchdogConfig>
    7da4:	1c d0       	rcall	.+56     	; 0x7dde <verifySpace>
    7da6:	80 e1       	ldi	r24, 0x10	; 16
    7da8:	01 d0       	rcall	.+2      	; 0x7dac <putch>
    7daa:	5e cf       	rjmp	.-324    	; 0x7c68 <main+0x68>

00007dac <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7dac:	90 91 c0 00 	lds	r25, 0x00C0
    7db0:	95 ff       	sbrs	r25, 5
    7db2:	fc cf       	rjmp	.-8      	; 0x7dac <putch>
  UART_UDR = ch;
    7db4:	80 93 c6 00 	sts	0x00C6, r24
    7db8:	08 95       	ret

00007dba <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7dba:	80 91 c0 00 	lds	r24, 0x00C0
    7dbe:	87 ff       	sbrs	r24, 7
    7dc0:	fc cf       	rjmp	.-8      	; 0x7dba <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7dc2:	80 91 c0 00 	lds	r24, 0x00C0
    7dc6:	84 fd       	sbrc	r24, 4
    7dc8:	01 c0       	rjmp	.+2      	; 0x7dcc <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7dca:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7dcc:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7dd0:	08 95       	ret

00007dd2 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dd2:	e0 e6       	ldi	r30, 0x60	; 96
    7dd4:	f0 e0       	ldi	r31, 0x00	; 0
    7dd6:	98 e1       	ldi	r25, 0x18	; 24
    7dd8:	90 83       	st	Z, r25
  WDTCSR = x;
    7dda:	80 83       	st	Z, r24
    7ddc:	08 95       	ret

00007dde <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7dde:	ed df       	rcall	.-38     	; 0x7dba <getch>
    7de0:	80 32       	cpi	r24, 0x20	; 32
    7de2:	19 f0       	breq	.+6      	; 0x7dea <verifySpace+0xc>
    7de4:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7de6:	f5 df       	rcall	.-22     	; 0x7dd2 <watchdogConfig>
    7de8:	ff cf       	rjmp	.-2      	; 0x7de8 <verifySpace+0xa>
    7dea:	84 e1       	ldi	r24, 0x14	; 20
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
    7dec:	df cf       	rjmp	.-66     	; 0x7dac <putch>

00007dee <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7dee:	cf 93       	push	r28
    7df0:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7df2:	e3 df       	rcall	.-58     	; 0x7dba <getch>
    7df4:	c1 50       	subi	r28, 0x01	; 1
    7df6:	e9 f7       	brne	.-6      	; 0x7df2 <getNch+0x4>
    7df8:	cf 91       	pop	r28
  verifySpace();
}
    7dfa:	f1 cf       	rjmp	.-30     	; 0x7dde <verifySpace>

00007dfc <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7dfc:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7dfe:	80 e0       	ldi	r24, 0x00	; 0
    7e00:	e8 df       	rcall	.-48     	; 0x7dd2 <watchdogConfig>
    7e02:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7e04:	ff 27       	eor	r31, r31
    7e06:	09 94       	ijmp

00007e08 <__eerd_byte_m328p>:
    7e08:	f9 99       	sbic	0x1f, 1	; 31
    // Jump to 'save' or RST vector
    "ldi r30,%[rstvec]\n"
    "clr r31\n"
    "ijmp\n"::[rstvec] "M"(appstart_vec)
  );
}
    7e0a:	fe cf       	rjmp	.-4      	; 0x7e08 <__eerd_byte_m328p>
    7e0c:	92 bd       	out	0x22, r25	; 34
    7e0e:	81 bd       	out	0x21, r24	; 33
    7e10:	f8 9a       	sbi	0x1f, 0	; 31
    7e12:	99 27       	eor	r25, r25
    7e14:	80 b5       	in	r24, 0x20	; 32
    7e16:	08 95       	ret

00007e18 <__eewr_byte_m328p>:
    7e18:	26 2f       	mov	r18, r22

00007e1a <__eewr_r18_m328p>:
    7e1a:	f9 99       	sbic	0x1f, 1	; 31
    7e1c:	fe cf       	rjmp	.-4      	; 0x7e1a <__eewr_r18_m328p>
    7e1e:	1f ba       	out	0x1f, r1	; 31
    7e20:	92 bd       	out	0x22, r25	; 34
    7e22:	81 bd       	out	0x21, r24	; 33
    7e24:	20 bd       	out	0x20, r18	; 32
    7e26:	0f b6       	in	r0, 0x3f	; 63
    7e28:	f8 94       	cli
    7e2a:	fa 9a       	sbi	0x1f, 2	; 31
    7e2c:	f9 9a       	sbi	0x1f, 1	; 31
    7e2e:	0f be       	out	0x3f, r0	; 63
    7e30:	01 96       	adiw	r24, 0x01	; 1
    7e32:	08 95       	ret
