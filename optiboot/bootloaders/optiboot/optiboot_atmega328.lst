
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007e22  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00007c00  00007c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000688  00000000  00000000  000002f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002af  00000000  00000000  00000979  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000880  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000014a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ff  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000529  00000000  00000000  00001733  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7c00:	11 24       	eor	r1, r1
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    7c02:	84 b7       	in	r24, 0x34	; 52
#else
  ch = MCUCSR;
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    7c04:	88 23       	and	r24, r24
    7c06:	49 f0       	breq	.+18     	; 0x7c1a <main+0x1a>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
    7c08:	98 2f       	mov	r25, r24
    7c0a:	9a 70       	andi	r25, 0x0A	; 10
    7c0c:	92 30       	cpi	r25, 0x02	; 2
    7c0e:	29 f0       	breq	.+10     	; 0x7c1a <main+0x1a>
	  if (ch & _BV(EXTRF)) {
    7c10:	81 ff       	sbrs	r24, 1
    7c12:	02 c0       	rjmp	.+4      	; 0x7c18 <main+0x18>
	       * prevent entering bootloader.
	       * '&' operation is skipped to spare few bytes as bits in MCUSR
	       * can only be cleared.
	       */
#if !defined(__AVR_ATmega16__)
	      MCUSR = ~(_BV(WDRF));  
    7c14:	97 ef       	ldi	r25, 0xF7	; 247
    7c16:	94 bf       	out	0x34, r25	; 52
#else
	      MCUCSR = ~(_BV(WDRF));  
#endif
	  }
	  appStart(ch);
    7c18:	e8 d0       	rcall	.+464    	; 0x7dea <appStart>
      }
  }

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7c1a:	85 e0       	ldi	r24, 0x05	; 5
    7c1c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7c20:	82 e0       	ldi	r24, 0x02	; 2
    7c22:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7c26:	88 e1       	ldi	r24, 0x18	; 24
    7c28:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7c2c:	86 e0       	ldi	r24, 0x06	; 6
    7c2e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7c32:	80 e1       	ldi	r24, 0x10	; 16
    7c34:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    7c38:	8e e0       	ldi	r24, 0x0E	; 14
    7c3a:	c2 d0       	rcall	.+388    	; 0x7dc0 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7c3c:	25 9a       	sbi	0x04, 5	; 4
    7c3e:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7c40:	20 e3       	ldi	r18, 0x30	; 48
    7c42:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    7c44:	91 e0       	ldi	r25, 0x01	; 1
    TCNT1 = -(F_CPU/(1024*16));
    7c46:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7c4a:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
    7c4e:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    7c50:	b0 9b       	sbis	0x16, 0	; 22
    7c52:	fe cf       	rjmp	.-4      	; 0x7c50 <main+0x50>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    7c54:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7c56:	a8 95       	wdr
    if (UART_SRA & _BV(RXC0))
    7c58:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7c5c:	47 fd       	sbrc	r20, 7
    7c5e:	02 c0       	rjmp	.+4      	; 0x7c64 <main+0x64>
    7c60:	81 50       	subi	r24, 0x01	; 1
  } while (--count);
    7c62:	89 f7       	brne	.-30     	; 0x7c46 <main+0x46>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short(address.word);
    7c64:	93 e0       	ldi	r25, 0x03	; 3
    7c66:	e9 2e       	mov	r14, r25

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7c68:	bb 24       	eor	r11, r11
    7c6a:	b3 94       	inc	r11
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    7c6c:	25 e0       	ldi	r18, 0x05	; 5
    7c6e:	a2 2e       	mov	r10, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    7c70:	31 e1       	ldi	r19, 0x11	; 17
    ch = getch();
    7c72:	93 2e       	mov	r9, r19
    if(ch == STK_GET_PARAMETER) {
    7c74:	99 d0       	rcall	.+306    	; 0x7da8 <getch>
      unsigned char which = getch();
    7c76:	81 34       	cpi	r24, 0x41	; 65
    7c78:	79 f4       	brne	.+30     	; 0x7c98 <main+0x98>
    7c7a:	96 d0       	rcall	.+300    	; 0x7da8 <getch>
      verifySpace();
    7c7c:	18 2f       	mov	r17, r24
    7c7e:	a6 d0       	rcall	.+332    	; 0x7dcc <verifySpace>
      if (which == STK_SW_MINOR) {
    7c80:	12 38       	cpi	r17, 0x82	; 130
    7c82:	11 f4       	brne	.+4      	; 0x7c88 <main+0x88>
      putch(0x00);
    7c84:	80 e0       	ldi	r24, 0x00	; 0
	  putch(optiboot_version >> 8);
    7c86:	04 c0       	rjmp	.+8      	; 0x7c90 <main+0x90>
      } else if (which == STK_SW_MAJOR) {
    7c88:	87 e0       	ldi	r24, 0x07	; 7
	putch(0x03);
    7c8a:	11 38       	cpi	r17, 0x81	; 129
    7c8c:	09 f0       	breq	.+2      	; 0x7c90 <main+0x90>
    7c8e:	83 e0       	ldi	r24, 0x03	; 3
    putch(STK_OK);
    7c90:	84 d0       	rcall	.+264    	; 0x7d9a <putch>
    7c92:	80 e1       	ldi	r24, 0x10	; 16
    ch = getch();
    7c94:	82 d0       	rcall	.+260    	; 0x7d9a <putch>
    else if(ch == STK_SET_DEVICE) {
    7c96:	ee cf       	rjmp	.-36     	; 0x7c74 <main+0x74>
    7c98:	82 34       	cpi	r24, 0x42	; 66
      getNch(20);
    7c9a:	19 f4       	brne	.+6      	; 0x7ca2 <main+0xa2>
      getNch(5);
    7c9c:	84 e1       	ldi	r24, 0x14	; 20
    7c9e:	9e d0       	rcall	.+316    	; 0x7ddc <getNch>
    else if(ch == STK_SET_DEVICE_EXT) {
    7ca0:	f8 cf       	rjmp	.-16     	; 0x7c92 <main+0x92>
      getNch(5);
    7ca2:	85 34       	cpi	r24, 0x45	; 69
    7ca4:	11 f4       	brne	.+4      	; 0x7caa <main+0xaa>
    else if(ch == STK_LOAD_ADDRESS) {
    7ca6:	85 e0       	ldi	r24, 0x05	; 5
      address.bytes[0] = getch();
    7ca8:	fa cf       	rjmp	.-12     	; 0x7c9e <main+0x9e>
    7caa:	85 35       	cpi	r24, 0x55	; 85
    7cac:	41 f4       	brne	.+16     	; 0x7cbe <main+0xbe>
      address.bytes[1] = getch();
    7cae:	7c d0       	rcall	.+248    	; 0x7da8 <getch>
    7cb0:	c8 2f       	mov	r28, r24
      address.word *= 2; // Convert from word address to byte address
    7cb2:	7a d0       	rcall	.+244    	; 0x7da8 <getch>
    7cb4:	d8 2f       	mov	r29, r24
      verifySpace();
    7cb6:	cc 0f       	add	r28, r28
    else if(ch == STK_UNIVERSAL) {
    7cb8:	dd 1f       	adc	r29, r29
      getNch(4);
    7cba:	88 d0       	rcall	.+272    	; 0x7dcc <verifySpace>
    7cbc:	ea cf       	rjmp	.-44     	; 0x7c92 <main+0x92>
    7cbe:	86 35       	cpi	r24, 0x56	; 86
    else if(ch == STK_PROG_PAGE) {
    7cc0:	19 f4       	brne	.+6      	; 0x7cc8 <main+0xc8>
    7cc2:	84 e0       	ldi	r24, 0x04	; 4
    7cc4:	8b d0       	rcall	.+278    	; 0x7ddc <getNch>
      GETLENGTH(length);
    7cc6:	de cf       	rjmp	.-68     	; 0x7c84 <main+0x84>
    7cc8:	84 36       	cpi	r24, 0x64	; 100
    7cca:	09 f0       	breq	.+2      	; 0x7cce <main+0xce>
    7ccc:	3b c0       	rjmp	.+118    	; 0x7d44 <main+0x144>
      desttype = getch();
    7cce:	6c d0       	rcall	.+216    	; 0x7da8 <getch>
    7cd0:	6b d0       	rcall	.+214    	; 0x7da8 <getch>
    7cd2:	f8 2e       	mov	r15, r24
      bufPtr = buff.bptr;
    7cd4:	69 d0       	rcall	.+210    	; 0x7da8 <getch>
    7cd6:	88 2e       	mov	r8, r24
      do *bufPtr++ = getch();
    7cd8:	00 e0       	ldi	r16, 0x00	; 0
    7cda:	11 e0       	ldi	r17, 0x01	; 1
    7cdc:	65 d0       	rcall	.+202    	; 0x7da8 <getch>
    7cde:	f8 01       	movw	r30, r16
      while (--length);
    7ce0:	81 93       	st	Z+, r24
    7ce2:	8f 01       	movw	r16, r30
      verifySpace();
    7ce4:	fe 12       	cpse	r15, r30
    7ce6:	fa cf       	rjmp	.-12     	; 0x7cdc <main+0xdc>
      writebuffer(desttype, buff, address, savelength);
    7ce8:	71 d0       	rcall	.+226    	; 0x7dcc <verifySpace>
    switch (memtype) {
    7cea:	6e 01       	movw	r12, r28
    7cec:	f5 e4       	ldi	r31, 0x45	; 69
    7cee:	8f 12       	cpse	r8, r31
    7cf0:	0e c0       	rjmp	.+28     	; 0x7d0e <main+0x10e>
    7cf2:	00 e0       	ldi	r16, 0x00	; 0
    7cf4:	11 e0       	ldi	r17, 0x01	; 1
	    eeprom_write_byte((address.bptr++), *(mybuff.bptr++));
    7cf6:	08 c0       	rjmp	.+16     	; 0x7d08 <main+0x108>
    7cf8:	f8 01       	movw	r30, r16
    7cfa:	61 91       	ld	r22, Z+
    7cfc:	8f 01       	movw	r16, r30
    7cfe:	c6 01       	movw	r24, r12
    7d00:	82 d0       	rcall	.+260    	; 0x7e06 <eeprom_write_byte>
    7d02:	ff ef       	ldi	r31, 0xFF	; 255
    7d04:	cf 1a       	sub	r12, r31
    7d06:	df 0a       	sbc	r13, r31
        while(len--) {
    7d08:	f0 12       	cpse	r15, r16
    7d0a:	f6 cf       	rjmp	.-20     	; 0x7cf8 <main+0xf8>
    7d0c:	c2 cf       	rjmp	.-124    	; 0x7c92 <main+0x92>
	    __boot_page_erase_short(address.word);
    7d0e:	fe 01       	movw	r30, r28
    7d10:	e7 be       	out	0x37, r14	; 55
    7d12:	e8 95       	spm
	    boot_spm_busy_wait();
    7d14:	07 b6       	in	r0, 0x37	; 55
    7d16:	00 fc       	sbrc	r0, 0
    7d18:	fd cf       	rjmp	.-6      	; 0x7d14 <main+0x114>
	    uint16_t addrPtr = address.word;
    7d1a:	fe 01       	movw	r30, r28
	    boot_spm_busy_wait();
    7d1c:	a0 e0       	ldi	r26, 0x00	; 0
    7d1e:	b1 e0       	ldi	r27, 0x01	; 1
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7d20:	8d 91       	ld	r24, X+
    7d22:	9d 91       	ld	r25, X+
    7d24:	0c 01       	movw	r0, r24
    7d26:	b7 be       	out	0x37, r11	; 55
		addrPtr += 2;
    7d28:	e8 95       	spm
	    } while (len -= 2);
    7d2a:	11 24       	eor	r1, r1
	    __boot_page_write_short(address.word);
    7d2c:	32 96       	adiw	r30, 0x02	; 2
    7d2e:	fa 12       	cpse	r15, r26
    7d30:	f7 cf       	rjmp	.-18     	; 0x7d20 <main+0x120>
	    boot_spm_busy_wait();
    7d32:	fe 01       	movw	r30, r28
    7d34:	a7 be       	out	0x37, r10	; 55
	    __boot_rww_enable_short();
    7d36:	e8 95       	spm
    7d38:	07 b6       	in	r0, 0x37	; 55
#endif
	} // default block
	break;
    7d3a:	00 fc       	sbrc	r0, 0
    else if(ch == STK_READ_PAGE) {
    7d3c:	fd cf       	rjmp	.-6      	; 0x7d38 <main+0x138>
    7d3e:	97 be       	out	0x37, r9	; 55
      GETLENGTH(length);
    7d40:	e8 95       	spm
    7d42:	a7 cf       	rjmp	.-178    	; 0x7c92 <main+0x92>
    7d44:	84 37       	cpi	r24, 0x74	; 116
    7d46:	d1 f4       	brne	.+52     	; 0x7d7c <main+0x17c>
      desttype = getch();
    7d48:	2f d0       	rcall	.+94     	; 0x7da8 <getch>
    7d4a:	2e d0       	rcall	.+92     	; 0x7da8 <getch>
    7d4c:	18 2f       	mov	r17, r24
      verifySpace();
    7d4e:	2c d0       	rcall	.+88     	; 0x7da8 <getch>
    7d50:	08 2f       	mov	r16, r24

static inline void read_mem(uint8_t memtype, addr16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    7d52:	3c d0       	rcall	.+120    	; 0x7dcc <verifySpace>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((address.bptr++)));
	} while (--length);
    7d54:	6e 01       	movw	r12, r28
	    putch(eeprom_read_byte((address.bptr++)));
    7d56:	05 34       	cpi	r16, 0x45	; 69
    7d58:	51 f4       	brne	.+20     	; 0x7d6e <main+0x16e>
    7d5a:	1c 0f       	add	r17, r28
    7d5c:	c6 01       	movw	r24, r12
    7d5e:	4b d0       	rcall	.+150    	; 0x7df6 <eeprom_read_byte>
    7d60:	1c d0       	rcall	.+56     	; 0x7d9a <putch>
	} while (--length);
    7d62:	8f ef       	ldi	r24, 0xFF	; 255
    7d64:	c8 1a       	sub	r12, r24
    7d66:	d8 0a       	sbc	r13, r24
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    7d68:	1c 11       	cpse	r17, r12
    7d6a:	f8 cf       	rjmp	.-16     	; 0x7d5c <main+0x15c>
    7d6c:	92 cf       	rjmp	.-220    	; 0x7c92 <main+0x92>
#endif
	    putch(ch);
    7d6e:	f6 01       	movw	r30, r12
    7d70:	85 91       	lpm	r24, Z+
	} while (--length);
    7d72:	6f 01       	movw	r12, r30
    7d74:	12 d0       	rcall	.+36     	; 0x7d9a <putch>
    7d76:	11 50       	subi	r17, 0x01	; 1
    else if(ch == STK_READ_SIGN) {
    7d78:	d1 f7       	brne	.-12     	; 0x7d6e <main+0x16e>
    7d7a:	8b cf       	rjmp	.-234    	; 0x7c92 <main+0x92>
      verifySpace();
    7d7c:	85 37       	cpi	r24, 0x75	; 117
    7d7e:	39 f4       	brne	.+14     	; 0x7d8e <main+0x18e>
      putch(SIGNATURE_0);
    7d80:	25 d0       	rcall	.+74     	; 0x7dcc <verifySpace>
    7d82:	8e e1       	ldi	r24, 0x1E	; 30
    7d84:	0a d0       	rcall	.+20     	; 0x7d9a <putch>
      putch(SIGNATURE_1);
    7d86:	85 e9       	ldi	r24, 0x95	; 149
    7d88:	08 d0       	rcall	.+16     	; 0x7d9a <putch>
    7d8a:	8f e0       	ldi	r24, 0x0F	; 15
      putch(SIGNATURE_2);
    7d8c:	81 cf       	rjmp	.-254    	; 0x7c90 <main+0x90>
    7d8e:	81 35       	cpi	r24, 0x51	; 81
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7d90:	09 f0       	breq	.+2      	; 0x7d94 <main+0x194>
    7d92:	93 cf       	rjmp	.-218    	; 0x7cba <main+0xba>
    7d94:	88 e0       	ldi	r24, 0x08	; 8
      watchdogConfig(WATCHDOG_16MS);
    7d96:	14 d0       	rcall	.+40     	; 0x7dc0 <watchdogConfig>
    7d98:	90 cf       	rjmp	.-224    	; 0x7cba <main+0xba>

00007d9a <putch>:
    7d9a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  while (!(UART_SRA & _BV(UDRE0)));
    7d9e:	95 ff       	sbrs	r25, 5
    7da0:	fc cf       	rjmp	.-8      	; 0x7d9a <putch>
  UART_UDR = ch;
    7da2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    7da6:	08 95       	ret

00007da8 <getch>:
  while(!(UART_SRA & _BV(RXC0)))
    7da8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dac:	87 ff       	sbrs	r24, 7
    7dae:	fc cf       	rjmp	.-8      	; 0x7da8 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7db0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7db4:	84 fd       	sbrc	r24, 4
    7db6:	01 c0       	rjmp	.+2      	; 0x7dba <getch+0x12>
  __asm__ __volatile__ (
    7db8:	a8 95       	wdr
  ch = UART_UDR;
    7dba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    7dbe:	08 95       	ret

00007dc0 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dc0:	e0 e6       	ldi	r30, 0x60	; 96
    7dc2:	f0 e0       	ldi	r31, 0x00	; 0
    7dc4:	98 e1       	ldi	r25, 0x18	; 24
    7dc6:	90 83       	st	Z, r25
  WDTCSR = x;
    7dc8:	80 83       	st	Z, r24
}
    7dca:	08 95       	ret

00007dcc <verifySpace>:
  if (getch() != CRC_EOP) {
    7dcc:	ed df       	rcall	.-38     	; 0x7da8 <getch>
    7dce:	80 32       	cpi	r24, 0x20	; 32
    7dd0:	19 f0       	breq	.+6      	; 0x7dd8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7dd2:	88 e0       	ldi	r24, 0x08	; 8
    7dd4:	f5 df       	rcall	.-22     	; 0x7dc0 <watchdogConfig>
  putch(STK_INSYNC);
    7dd6:	ff cf       	rjmp	.-2      	; 0x7dd6 <verifySpace+0xa>
    7dd8:	84 e1       	ldi	r24, 0x14	; 20
void getNch(uint8_t count) {
    7dda:	df cf       	rjmp	.-66     	; 0x7d9a <putch>

00007ddc <getNch>:
    7ddc:	cf 93       	push	r28
  do getch(); while (--count);
    7dde:	c8 2f       	mov	r28, r24
    7de0:	e3 df       	rcall	.-58     	; 0x7da8 <getch>
    7de2:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
    7de4:	e9 f7       	brne	.-6      	; 0x7de0 <getNch+0x4>
    7de6:	cf 91       	pop	r28
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7de8:	f1 cf       	rjmp	.-30     	; 0x7dcc <verifySpace>

00007dea <appStart>:
  watchdogConfig(WATCHDOG_OFF);
    7dea:	28 2e       	mov	r2, r24
    7dec:	80 e0       	ldi	r24, 0x00	; 0
    7dee:	e8 df       	rcall	.-48     	; 0x7dc0 <watchdogConfig>
  __asm__ __volatile__ (
    7df0:	e0 e0       	ldi	r30, 0x00	; 0
    7df2:	ff 27       	eor	r31, r31
    7df4:	09 94       	ijmp

00007df6 <eeprom_read_byte>:
    7df6:	f9 99       	sbic	0x1f, 1	; 31
    7df8:	fe cf       	rjmp	.-4      	; 0x7df6 <eeprom_read_byte>
    7dfa:	92 bd       	out	0x22, r25	; 34
    7dfc:	81 bd       	out	0x21, r24	; 33
    7dfe:	f8 9a       	sbi	0x1f, 0	; 31
    7e00:	99 27       	eor	r25, r25
    7e02:	80 b5       	in	r24, 0x20	; 32
    7e04:	08 95       	ret

00007e06 <eeprom_write_byte>:
    7e06:	26 2f       	mov	r18, r22

00007e08 <eeprom_write_r18>:
    7e08:	f9 99       	sbic	0x1f, 1	; 31
    7e0a:	fe cf       	rjmp	.-4      	; 0x7e08 <eeprom_write_r18>
    7e0c:	1f ba       	out	0x1f, r1	; 31
    7e0e:	92 bd       	out	0x22, r25	; 34
    7e10:	81 bd       	out	0x21, r24	; 33
    7e12:	20 bd       	out	0x20, r18	; 32
    7e14:	0f b6       	in	r0, 0x3f	; 63
    7e16:	f8 94       	cli
    7e18:	fa 9a       	sbi	0x1f, 2	; 31
    7e1a:	f9 9a       	sbi	0x1f, 1	; 31
    7e1c:	0f be       	out	0x3f, r0	; 63
    7e1e:	01 96       	adiw	r24, 0x01	; 1
    7e20:	08 95       	ret
