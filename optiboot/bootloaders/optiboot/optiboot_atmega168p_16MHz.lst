
optiboot_atmega168p_16MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  00000262  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000c54  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e3f  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003e00 <main>:
    3e00:	1f 92       	push	r1
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	11 24       	eor	r1, r1
    3e08:	84 b7       	in	r24, 0x34	; 52
    3e0a:	14 be       	out	0x34, r1	; 52
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	9d 70       	andi	r25, 0x0D	; 13
    3e10:	09 f0       	breq	.+2      	; 0x3e14 <main+0x14>
    3e12:	d7 d0       	rcall	.+430    	; 0x3fc2 <appStart>
    3e14:	85 e0       	ldi	r24, 0x05	; 5
    3e16:	80 93 81 00 	sts	0x0081, r24
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
    3e1c:	80 93 c0 00 	sts	0x00C0, r24
    3e20:	88 e1       	ldi	r24, 0x18	; 24
    3e22:	80 93 c1 00 	sts	0x00C1, r24
    3e26:	86 e0       	ldi	r24, 0x06	; 6
    3e28:	80 93 c2 00 	sts	0x00C2, r24
    3e2c:	80 e1       	ldi	r24, 0x10	; 16
    3e2e:	80 93 c4 00 	sts	0x00C4, r24
    3e32:	8e e0       	ldi	r24, 0x0E	; 14
    3e34:	b1 d0       	rcall	.+354    	; 0x3f98 <watchdogConfig>
    3e36:	25 9a       	sbi	0x04, 5	; 4
    3e38:	86 e0       	ldi	r24, 0x06	; 6
    3e3a:	20 e3       	ldi	r18, 0x30	; 48
    3e3c:	3c ef       	ldi	r19, 0xFC	; 252
    3e3e:	91 e0       	ldi	r25, 0x01	; 1
    3e40:	30 93 85 00 	sts	0x0085, r19
    3e44:	20 93 84 00 	sts	0x0084, r18
    3e48:	96 bb       	out	0x16, r25	; 22
    3e4a:	b0 9b       	sbis	0x16, 0	; 22
    3e4c:	fe cf       	rjmp	.-4      	; 0x3e4a <main+0x4a>
    3e4e:	1d 9a       	sbi	0x03, 5	; 3
    3e50:	a8 95       	wdr
    3e52:	81 50       	subi	r24, 0x01	; 1
    3e54:	a9 f7       	brne	.-22     	; 0x3e40 <main+0x40>
    3e56:	81 2c       	mov	r8, r1
    3e58:	91 2c       	mov	r9, r1
    3e5a:	13 e0       	ldi	r17, 0x03	; 3
    3e5c:	01 e0       	ldi	r16, 0x01	; 1
    3e5e:	25 e0       	ldi	r18, 0x05	; 5
    3e60:	f2 2e       	mov	r15, r18
    3e62:	31 e1       	ldi	r19, 0x11	; 17
    3e64:	e3 2e       	mov	r14, r19
    3e66:	8c d0       	rcall	.+280    	; 0x3f80 <getch>
    3e68:	81 34       	cpi	r24, 0x41	; 65
    3e6a:	79 f4       	brne	.+30     	; 0x3e8a <main+0x8a>
    3e6c:	89 d0       	rcall	.+274    	; 0x3f80 <getch>
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	99 d0       	rcall	.+306    	; 0x3fa4 <verifySpace>
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	82 38       	cpi	r24, 0x82	; 130
    3e76:	11 f4       	brne	.+4      	; 0x3e7c <main+0x7c>
    3e78:	82 e0       	ldi	r24, 0x02	; 2
    3e7a:	05 c0       	rjmp	.+10     	; 0x3e86 <main+0x86>
    3e7c:	81 38       	cpi	r24, 0x81	; 129
    3e7e:	11 f4       	brne	.+4      	; 0x3e84 <main+0x84>
    3e80:	86 e0       	ldi	r24, 0x06	; 6
    3e82:	01 c0       	rjmp	.+2      	; 0x3e86 <main+0x86>
    3e84:	83 e0       	ldi	r24, 0x03	; 3
    3e86:	75 d0       	rcall	.+234    	; 0x3f72 <putch>
    3e88:	71 c0       	rjmp	.+226    	; 0x3f6c <main+0x16c>
    3e8a:	82 34       	cpi	r24, 0x42	; 66
    3e8c:	11 f4       	brne	.+4      	; 0x3e92 <main+0x92>
    3e8e:	84 e1       	ldi	r24, 0x14	; 20
    3e90:	03 c0       	rjmp	.+6      	; 0x3e98 <main+0x98>
    3e92:	85 34       	cpi	r24, 0x45	; 69
    3e94:	19 f4       	brne	.+6      	; 0x3e9c <main+0x9c>
    3e96:	85 e0       	ldi	r24, 0x05	; 5
    3e98:	8d d0       	rcall	.+282    	; 0x3fb4 <getNch>
    3e9a:	68 c0       	rjmp	.+208    	; 0x3f6c <main+0x16c>
    3e9c:	85 35       	cpi	r24, 0x55	; 85
    3e9e:	49 f4       	brne	.+18     	; 0x3eb2 <main+0xb2>
    3ea0:	6f d0       	rcall	.+222    	; 0x3f80 <getch>
    3ea2:	d8 2e       	mov	r13, r24
    3ea4:	6d d0       	rcall	.+218    	; 0x3f80 <getch>
    3ea6:	8d 2c       	mov	r8, r13
    3ea8:	91 2c       	mov	r9, r1
    3eaa:	98 2a       	or	r9, r24
    3eac:	88 0c       	add	r8, r8
    3eae:	99 1c       	adc	r9, r9
    3eb0:	5c c0       	rjmp	.+184    	; 0x3f6a <main+0x16a>
    3eb2:	86 35       	cpi	r24, 0x56	; 86
    3eb4:	21 f4       	brne	.+8      	; 0x3ebe <main+0xbe>
    3eb6:	84 e0       	ldi	r24, 0x04	; 4
    3eb8:	7d d0       	rcall	.+250    	; 0x3fb4 <getNch>
    3eba:	80 e0       	ldi	r24, 0x00	; 0
    3ebc:	e4 cf       	rjmp	.-56     	; 0x3e86 <main+0x86>
    3ebe:	84 36       	cpi	r24, 0x64	; 100
    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <main+0xc4>
    3ec2:	36 c0       	rjmp	.+108    	; 0x3f30 <main+0x130>
    3ec4:	5d d0       	rcall	.+186    	; 0x3f80 <getch>
    3ec6:	5c d0       	rcall	.+184    	; 0x3f80 <getch>
    3ec8:	d8 2e       	mov	r13, r24
    3eca:	5a d0       	rcall	.+180    	; 0x3f80 <getch>
    3ecc:	c8 2e       	mov	r12, r24
    3ece:	a1 2c       	mov	r10, r1
    3ed0:	bb 24       	eor	r11, r11
    3ed2:	b3 94       	inc	r11
    3ed4:	55 d0       	rcall	.+170    	; 0x3f80 <getch>
    3ed6:	f5 01       	movw	r30, r10
    3ed8:	81 93       	st	Z+, r24
    3eda:	5f 01       	movw	r10, r30
    3edc:	de 12       	cpse	r13, r30
    3ede:	fa cf       	rjmp	.-12     	; 0x3ed4 <main+0xd4>
    3ee0:	61 d0       	rcall	.+194    	; 0x3fa4 <verifySpace>
    3ee2:	f5 e4       	ldi	r31, 0x45	; 69
    3ee4:	cf 12       	cpse	r12, r31
    3ee6:	01 c0       	rjmp	.+2      	; 0x3eea <main+0xea>
    3ee8:	ff cf       	rjmp	.-2      	; 0x3ee8 <main+0xe8>
    3eea:	f4 01       	movw	r30, r8
    3eec:	17 bf       	out	0x37, r17	; 55
    3eee:	e8 95       	spm
    3ef0:	07 b6       	in	r0, 0x37	; 55
    3ef2:	00 fc       	sbrc	r0, 0
    3ef4:	fd cf       	rjmp	.-6      	; 0x3ef0 <main+0xf0>
    3ef6:	a4 01       	movw	r20, r8
    3ef8:	a0 e0       	ldi	r26, 0x00	; 0
    3efa:	b1 e0       	ldi	r27, 0x01	; 1
    3efc:	2c 91       	ld	r18, X
    3efe:	12 96       	adiw	r26, 0x02	; 2
    3f00:	cd 01       	movw	r24, r26
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	fc 01       	movw	r30, r24
    3f06:	80 81       	ld	r24, Z
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	38 2b       	or	r19, r24
    3f0c:	fa 01       	movw	r30, r20
    3f0e:	09 01       	movw	r0, r18
    3f10:	07 bf       	out	0x37, r16	; 55
    3f12:	e8 95       	spm
    3f14:	11 24       	eor	r1, r1
    3f16:	4e 5f       	subi	r20, 0xFE	; 254
    3f18:	5f 4f       	sbci	r21, 0xFF	; 255
    3f1a:	da 12       	cpse	r13, r26
    3f1c:	ef cf       	rjmp	.-34     	; 0x3efc <main+0xfc>
    3f1e:	f4 01       	movw	r30, r8
    3f20:	f7 be       	out	0x37, r15	; 55
    3f22:	e8 95       	spm
    3f24:	07 b6       	in	r0, 0x37	; 55
    3f26:	00 fc       	sbrc	r0, 0
    3f28:	fd cf       	rjmp	.-6      	; 0x3f24 <main+0x124>
    3f2a:	e7 be       	out	0x37, r14	; 55
    3f2c:	e8 95       	spm
    3f2e:	1e c0       	rjmp	.+60     	; 0x3f6c <main+0x16c>
    3f30:	84 37       	cpi	r24, 0x74	; 116
    3f32:	71 f4       	brne	.+28     	; 0x3f50 <main+0x150>
    3f34:	25 d0       	rcall	.+74     	; 0x3f80 <getch>
    3f36:	24 d0       	rcall	.+72     	; 0x3f80 <getch>
    3f38:	d8 2e       	mov	r13, r24
    3f3a:	22 d0       	rcall	.+68     	; 0x3f80 <getch>
    3f3c:	33 d0       	rcall	.+102    	; 0x3fa4 <verifySpace>
    3f3e:	54 01       	movw	r10, r8
    3f40:	f5 01       	movw	r30, r10
    3f42:	85 91       	lpm	r24, Z+
    3f44:	5f 01       	movw	r10, r30
    3f46:	15 d0       	rcall	.+42     	; 0x3f72 <putch>
    3f48:	da 94       	dec	r13
    3f4a:	d1 10       	cpse	r13, r1
    3f4c:	f9 cf       	rjmp	.-14     	; 0x3f40 <main+0x140>
    3f4e:	0e c0       	rjmp	.+28     	; 0x3f6c <main+0x16c>
    3f50:	85 37       	cpi	r24, 0x75	; 117
    3f52:	39 f4       	brne	.+14     	; 0x3f62 <main+0x162>
    3f54:	27 d0       	rcall	.+78     	; 0x3fa4 <verifySpace>
    3f56:	8e e1       	ldi	r24, 0x1E	; 30
    3f58:	0c d0       	rcall	.+24     	; 0x3f72 <putch>
    3f5a:	84 e9       	ldi	r24, 0x94	; 148
    3f5c:	0a d0       	rcall	.+20     	; 0x3f72 <putch>
    3f5e:	8b e0       	ldi	r24, 0x0B	; 11
    3f60:	92 cf       	rjmp	.-220    	; 0x3e86 <main+0x86>
    3f62:	81 35       	cpi	r24, 0x51	; 81
    3f64:	11 f4       	brne	.+4      	; 0x3f6a <main+0x16a>
    3f66:	88 e0       	ldi	r24, 0x08	; 8
    3f68:	17 d0       	rcall	.+46     	; 0x3f98 <watchdogConfig>
    3f6a:	1c d0       	rcall	.+56     	; 0x3fa4 <verifySpace>
    3f6c:	80 e1       	ldi	r24, 0x10	; 16
    3f6e:	01 d0       	rcall	.+2      	; 0x3f72 <putch>
    3f70:	7a cf       	rjmp	.-268    	; 0x3e66 <main+0x66>

00003f72 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f72:	90 91 c0 00 	lds	r25, 0x00C0
    3f76:	95 ff       	sbrs	r25, 5
    3f78:	fc cf       	rjmp	.-8      	; 0x3f72 <putch>
  UART_UDR = ch;
    3f7a:	80 93 c6 00 	sts	0x00C6, r24
    3f7e:	08 95       	ret

00003f80 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f80:	80 91 c0 00 	lds	r24, 0x00C0
    3f84:	87 ff       	sbrs	r24, 7
    3f86:	fc cf       	rjmp	.-8      	; 0x3f80 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f88:	80 91 c0 00 	lds	r24, 0x00C0
    3f8c:	84 fd       	sbrc	r24, 4
    3f8e:	01 c0       	rjmp	.+2      	; 0x3f92 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f90:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    3f92:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3f96:	08 95       	ret

00003f98 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f98:	e0 e6       	ldi	r30, 0x60	; 96
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	98 e1       	ldi	r25, 0x18	; 24
    3f9e:	90 83       	st	Z, r25
  WDTCSR = x;
    3fa0:	80 83       	st	Z, r24
    3fa2:	08 95       	ret

00003fa4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fa4:	ed df       	rcall	.-38     	; 0x3f80 <getch>
    3fa6:	80 32       	cpi	r24, 0x20	; 32
    3fa8:	19 f0       	breq	.+6      	; 0x3fb0 <verifySpace+0xc>
    3faa:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fac:	f5 df       	rcall	.-22     	; 0x3f98 <watchdogConfig>
    3fae:	ff cf       	rjmp	.-2      	; 0x3fae <verifySpace+0xa>
    3fb0:	84 e1       	ldi	r24, 0x14	; 20
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
    3fb2:	df cf       	rjmp	.-66     	; 0x3f72 <putch>

00003fb4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fb4:	cf 93       	push	r28
    3fb6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fb8:	e3 df       	rcall	.-58     	; 0x3f80 <getch>
    3fba:	c1 50       	subi	r28, 0x01	; 1
    3fbc:	e9 f7       	brne	.-6      	; 0x3fb8 <getNch+0x4>
    3fbe:	cf 91       	pop	r28
  verifySpace();
}
    3fc0:	f1 cf       	rjmp	.-30     	; 0x3fa4 <verifySpace>

00003fc2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fc2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fc4:	80 e0       	ldi	r24, 0x00	; 0
    3fc6:	e8 df       	rcall	.-48     	; 0x3f98 <watchdogConfig>
    3fc8:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    3fca:	ff 27       	eor	r31, r31
    3fcc:	09 94       	ijmp
