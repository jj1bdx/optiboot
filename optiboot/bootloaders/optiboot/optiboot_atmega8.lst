
optiboot_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00001e00  00001e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00800060  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000621  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bd  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b6  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001300  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a5  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000190d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1e00:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  SP=RAMEND;  // This is done by hardware reset
    1e02:	8f e5       	ldi	r24, 0x5F	; 95
    1e04:	94 e0       	ldi	r25, 0x04	; 4
    1e06:	9e bf       	out	0x3e, r25	; 62
    1e08:	8d bf       	out	0x3d, r24	; 61
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    1e0a:	84 b7       	in	r24, 0x34	; 52
#else
  ch = MCUCSR;
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1e0c:	88 23       	and	r24, r24
    1e0e:	49 f0       	breq	.+18     	; 0x1e22 <main+0x22>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
    1e10:	98 2f       	mov	r25, r24
    1e12:	9a 70       	andi	r25, 0x0A	; 10
    1e14:	92 30       	cpi	r25, 0x02	; 2
    1e16:	29 f0       	breq	.+10     	; 0x1e22 <main+0x22>
	  if (ch & _BV(EXTRF)) {
    1e18:	81 ff       	sbrs	r24, 1
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <main+0x20>
	       * prevent entering bootloader.
	       * '&' operation is skipped to spare few bytes as bits in MCUSR
	       * can only be cleared.
	       */
#if !defined(__AVR_ATmega16__)
	      MCUSR = ~(_BV(WDRF));  
    1e1c:	97 ef       	ldi	r25, 0xF7	; 247
    1e1e:	94 bf       	out	0x34, r25	; 52
#else
	      MCUCSR = ~(_BV(WDRF));  
#endif
	  }
	  appStart(ch);
    1e20:	c6 d0       	rcall	.+396    	; 0x1fae <appStart>
      }
  }

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e22:	85 e0       	ldi	r24, 0x05	; 5
    1e24:	8e bd       	out	0x2e, r24	; 46
#endif

#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  UCSRA = _BV(U2X); //Double speed mode USART
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1e2a:	88 e1       	ldi	r24, 0x18	; 24
    1e2c:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1e2e:	86 e8       	ldi	r24, 0x86	; 134
    1e30:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1e32:	80 e1       	ldi	r24, 0x10	; 16
    1e34:	89 b9       	out	0x09, r24	; 9
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    1e36:	8e e0       	ldi	r24, 0x0E	; 14
    1e38:	a7 d0       	rcall	.+334    	; 0x1f88 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e3a:	bd 9a       	sbi	0x17, 5	; 23
    1e3c:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e3e:	20 e3       	ldi	r18, 0x30	; 48
    1e40:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1e42:	44 e0       	ldi	r20, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
    1e44:	50 e2       	ldi	r21, 0x20	; 32
    TCNT1 = -(F_CPU/(1024*16));
    1e46:	3d bd       	out	0x2d, r19	; 45
    1e48:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    1e4a:	48 bf       	out	0x38, r20	; 56
    while(!(TIFR1 & _BV(TOV1)));
    1e4c:	08 b6       	in	r0, 0x38	; 56
    1e4e:	02 fe       	sbrs	r0, 2
    1e50:	fd cf       	rjmp	.-6      	; 0x1e4c <main+0x4c>
    LED_PORT ^= _BV(LED);
    1e52:	98 b3       	in	r25, 0x18	; 24
    1e54:	95 27       	eor	r25, r21
    1e56:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e58:	a8 95       	wdr
    if (UART_SRA & _BV(RXC0))
    1e5a:	5f 99       	sbic	0x0b, 7	; 11
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <main+0x62>
    1e5e:	81 50       	subi	r24, 0x01	; 1
  } while (--count);
    1e60:	91 f7       	brne	.-28     	; 0x1e46 <main+0x46>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short(address.word);
    1e62:	23 e0       	ldi	r18, 0x03	; 3
    1e64:	e2 2e       	mov	r14, r18

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1e66:	dd 24       	eor	r13, r13
    1e68:	d3 94       	inc	r13
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    1e6a:	35 e0       	ldi	r19, 0x05	; 5
    1e6c:	c3 2e       	mov	r12, r19
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    1e6e:	41 e1       	ldi	r20, 0x11	; 17
    1e70:	b4 2e       	mov	r11, r20
    ch = getch();
    1e72:	83 d0       	rcall	.+262    	; 0x1f7a <getch>
    if(ch == STK_GET_PARAMETER) {
    1e74:	81 34       	cpi	r24, 0x41	; 65
    1e76:	79 f4       	brne	.+30     	; 0x1e96 <main+0x96>
      unsigned char which = getch();
    1e78:	80 d0       	rcall	.+256    	; 0x1f7a <getch>
    1e7a:	18 2f       	mov	r17, r24
      verifySpace();
    1e7c:	89 d0       	rcall	.+274    	; 0x1f90 <verifySpace>
      if (which == STK_SW_MINOR) {
    1e7e:	12 38       	cpi	r17, 0x82	; 130
    1e80:	29 f4       	brne	.+10     	; 0x1e8c <main+0x8c>
      putch(0x00);
    1e82:	80 e0       	ldi	r24, 0x00	; 0
	putch(0x03);
    1e84:	76 d0       	rcall	.+236    	; 0x1f72 <putch>
    putch(STK_OK);
    1e86:	80 e1       	ldi	r24, 0x10	; 16
    1e88:	74 d0       	rcall	.+232    	; 0x1f72 <putch>
    ch = getch();
    1e8a:	f3 cf       	rjmp	.-26     	; 0x1e72 <main+0x72>
	putch(0x03);
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
    1e8e:	11 38       	cpi	r17, 0x81	; 129
    1e90:	c9 f7       	brne	.-14     	; 0x1e84 <main+0x84>
      putch(SIGNATURE_2);
    1e92:	87 e0       	ldi	r24, 0x07	; 7
    1e94:	f7 cf       	rjmp	.-18     	; 0x1e84 <main+0x84>
    else if(ch == STK_SET_DEVICE) {
    1e96:	82 34       	cpi	r24, 0x42	; 66
    1e98:	19 f4       	brne	.+6      	; 0x1ea0 <main+0xa0>
      getNch(20);
    1e9a:	84 e1       	ldi	r24, 0x14	; 20
      getNch(5);
    1e9c:	81 d0       	rcall	.+258    	; 0x1fa0 <getNch>
    1e9e:	f3 cf       	rjmp	.-26     	; 0x1e86 <main+0x86>
    else if(ch == STK_SET_DEVICE_EXT) {
    1ea0:	85 34       	cpi	r24, 0x45	; 69
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <main+0xa8>
      getNch(5);
    1ea4:	85 e0       	ldi	r24, 0x05	; 5
    1ea6:	fa cf       	rjmp	.-12     	; 0x1e9c <main+0x9c>
    else if(ch == STK_LOAD_ADDRESS) {
    1ea8:	85 35       	cpi	r24, 0x55	; 85
    1eaa:	41 f4       	brne	.+16     	; 0x1ebc <main+0xbc>
      address.bytes[0] = getch();
    1eac:	66 d0       	rcall	.+204    	; 0x1f7a <getch>
    1eae:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1eb0:	64 d0       	rcall	.+200    	; 0x1f7a <getch>
    1eb2:	d8 2f       	mov	r29, r24
      address.word *= 2; // Convert from word address to byte address
    1eb4:	cc 0f       	add	r28, r28
    1eb6:	dd 1f       	adc	r29, r29
      verifySpace();
    1eb8:	6b d0       	rcall	.+214    	; 0x1f90 <verifySpace>
    1eba:	e5 cf       	rjmp	.-54     	; 0x1e86 <main+0x86>
    else if(ch == STK_UNIVERSAL) {
    1ebc:	86 35       	cpi	r24, 0x56	; 86
    1ebe:	19 f4       	brne	.+6      	; 0x1ec6 <main+0xc6>
      getNch(4);
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	6e d0       	rcall	.+220    	; 0x1fa0 <getNch>
    1ec4:	de cf       	rjmp	.-68     	; 0x1e82 <main+0x82>
    else if(ch == STK_PROG_PAGE) {
    1ec6:	84 36       	cpi	r24, 0x64	; 100
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <main+0xcc>
    1eca:	35 c0       	rjmp	.+106    	; 0x1f36 <main+0x136>
      GETLENGTH(length);
    1ecc:	56 d0       	rcall	.+172    	; 0x1f7a <getch>
    1ece:	55 d0       	rcall	.+170    	; 0x1f7a <getch>
    1ed0:	f8 2e       	mov	r15, r24
      desttype = getch();
    1ed2:	53 d0       	rcall	.+166    	; 0x1f7a <getch>
    1ed4:	a8 2e       	mov	r10, r24
      bufPtr = buff.bptr;
    1ed6:	00 e6       	ldi	r16, 0x60	; 96
    1ed8:	10 e0       	ldi	r17, 0x00	; 0
      while (--length);
    1eda:	80 e6       	ldi	r24, 0x60	; 96
    1edc:	98 2e       	mov	r9, r24
    1ede:	9f 0c       	add	r9, r15
      do *bufPtr++ = getch();
    1ee0:	4c d0       	rcall	.+152    	; 0x1f7a <getch>
    1ee2:	f8 01       	movw	r30, r16
    1ee4:	81 93       	st	Z+, r24
    1ee6:	8f 01       	movw	r16, r30
      while (--length);
    1ee8:	9e 12       	cpse	r9, r30
    1eea:	fa cf       	rjmp	.-12     	; 0x1ee0 <main+0xe0>
      verifySpace();
    1eec:	51 d0       	rcall	.+162    	; 0x1f90 <verifySpace>
    switch (memtype) {
    1eee:	f5 e4       	ldi	r31, 0x45	; 69
    1ef0:	af 12       	cpse	r10, r31
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <main+0xf6>
	    ; // Error: wait for WDT
    1ef4:	ff cf       	rjmp	.-2      	; 0x1ef4 <main+0xf4>
	    __boot_page_erase_short(address.word);
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e7 be       	out	0x37, r14	; 55
    1efa:	e8 95       	spm
	    boot_spm_busy_wait();
    1efc:	07 b6       	in	r0, 0x37	; 55
    1efe:	00 fc       	sbrc	r0, 0
    1f00:	fd cf       	rjmp	.-6      	; 0x1efc <main+0xfc>
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	80 e0       	ldi	r24, 0x00	; 0
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1f06:	fe 01       	movw	r30, r28
    1f08:	e8 0f       	add	r30, r24
    1f0a:	f9 1f       	adc	r31, r25
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	a0 5a       	subi	r26, 0xA0	; 160
    1f10:	bf 4f       	sbci	r27, 0xFF	; 255
    1f12:	2d 91       	ld	r18, X+
    1f14:	3c 91       	ld	r19, X
    1f16:	09 01       	movw	r0, r18
    1f18:	d7 be       	out	0x37, r13	; 55
    1f1a:	e8 95       	spm
    1f1c:	11 24       	eor	r1, r1
		addrPtr += 2;
    1f1e:	02 96       	adiw	r24, 0x02	; 2
	    } while (len -= 2);
    1f20:	f8 12       	cpse	r15, r24
    1f22:	f1 cf       	rjmp	.-30     	; 0x1f06 <main+0x106>
	    __boot_page_write_short(address.word);
    1f24:	fe 01       	movw	r30, r28
    1f26:	c7 be       	out	0x37, r12	; 55
    1f28:	e8 95       	spm
	    boot_spm_busy_wait();
    1f2a:	07 b6       	in	r0, 0x37	; 55
    1f2c:	00 fc       	sbrc	r0, 0
    1f2e:	fd cf       	rjmp	.-6      	; 0x1f2a <main+0x12a>
	    __boot_rww_enable_short();
    1f30:	b7 be       	out	0x37, r11	; 55
    1f32:	e8 95       	spm
#endif
	} // default block
	break;
    1f34:	a8 cf       	rjmp	.-176    	; 0x1e86 <main+0x86>
    else if(ch == STK_READ_PAGE) {
    1f36:	84 37       	cpi	r24, 0x74	; 116
    1f38:	71 f4       	brne	.+28     	; 0x1f56 <main+0x156>
      GETLENGTH(length);
    1f3a:	1f d0       	rcall	.+62     	; 0x1f7a <getch>
    1f3c:	1e d0       	rcall	.+60     	; 0x1f7a <getch>
    1f3e:	f8 2e       	mov	r15, r24
      desttype = getch();
    1f40:	1c d0       	rcall	.+56     	; 0x1f7a <getch>
      verifySpace();
    1f42:	26 d0       	rcall	.+76     	; 0x1f90 <verifySpace>
      read_mem(desttype, address, length);
    1f44:	8e 01       	movw	r16, r28
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    1f46:	f8 01       	movw	r30, r16
    1f48:	85 91       	lpm	r24, Z+
    1f4a:	8f 01       	movw	r16, r30
#endif
	    putch(ch);
    1f4c:	12 d0       	rcall	.+36     	; 0x1f72 <putch>
	} while (--length);
    1f4e:	fa 94       	dec	r15
    1f50:	f1 10       	cpse	r15, r1
    1f52:	f9 cf       	rjmp	.-14     	; 0x1f46 <main+0x146>
    1f54:	98 cf       	rjmp	.-208    	; 0x1e86 <main+0x86>
    else if(ch == STK_READ_SIGN) {
    1f56:	85 37       	cpi	r24, 0x75	; 117
    1f58:	31 f4       	brne	.+12     	; 0x1f66 <main+0x166>
      verifySpace();
    1f5a:	1a d0       	rcall	.+52     	; 0x1f90 <verifySpace>
      putch(SIGNATURE_0);
    1f5c:	8e e1       	ldi	r24, 0x1E	; 30
    1f5e:	09 d0       	rcall	.+18     	; 0x1f72 <putch>
      putch(SIGNATURE_1);
    1f60:	83 e9       	ldi	r24, 0x93	; 147
    1f62:	07 d0       	rcall	.+14     	; 0x1f72 <putch>
    1f64:	96 cf       	rjmp	.-212    	; 0x1e92 <main+0x92>
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f66:	81 35       	cpi	r24, 0x51	; 81
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <main+0x16c>
    1f6a:	a6 cf       	rjmp	.-180    	; 0x1eb8 <main+0xb8>
      watchdogConfig(WATCHDOG_16MS);
    1f6c:	88 e0       	ldi	r24, 0x08	; 8
    1f6e:	0c d0       	rcall	.+24     	; 0x1f88 <watchdogConfig>
      verifySpace();
    1f70:	a3 cf       	rjmp	.-186    	; 0x1eb8 <main+0xb8>

00001f72 <putch>:
  while (!(UART_SRA & _BV(UDRE0)));
    1f72:	5d 9b       	sbis	0x0b, 5	; 11
    1f74:	fe cf       	rjmp	.-4      	; 0x1f72 <putch>
  UART_UDR = ch;
    1f76:	8c b9       	out	0x0c, r24	; 12
}
    1f78:	08 95       	ret

00001f7a <getch>:
  while(!(UART_SRA & _BV(RXC0)))
    1f7a:	5f 9b       	sbis	0x0b, 7	; 11
    1f7c:	fe cf       	rjmp	.-4      	; 0x1f7a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f7e:	5c 99       	sbic	0x0b, 4	; 11
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <getch+0xa>
  __asm__ __volatile__ (
    1f82:	a8 95       	wdr
  ch = UART_UDR;
    1f84:	8c b1       	in	r24, 0x0c	; 12
}
    1f86:	08 95       	ret

00001f88 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f88:	98 e1       	ldi	r25, 0x18	; 24
    1f8a:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f8c:	81 bd       	out	0x21, r24	; 33
}
    1f8e:	08 95       	ret

00001f90 <verifySpace>:
  if (getch() != CRC_EOP) {
    1f90:	f4 df       	rcall	.-24     	; 0x1f7a <getch>
    1f92:	80 32       	cpi	r24, 0x20	; 32
    1f94:	19 f0       	breq	.+6      	; 0x1f9c <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f96:	88 e0       	ldi	r24, 0x08	; 8
    1f98:	f7 df       	rcall	.-18     	; 0x1f88 <watchdogConfig>
      ;				      //  a reset and app start.
    1f9a:	ff cf       	rjmp	.-2      	; 0x1f9a <verifySpace+0xa>
  putch(STK_INSYNC);
    1f9c:	84 e1       	ldi	r24, 0x14	; 20
    1f9e:	e9 cf       	rjmp	.-46     	; 0x1f72 <putch>

00001fa0 <getNch>:
void getNch(uint8_t count) {
    1fa0:	cf 93       	push	r28
    1fa2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fa4:	ea df       	rcall	.-44     	; 0x1f7a <getch>
    1fa6:	c1 50       	subi	r28, 0x01	; 1
    1fa8:	e9 f7       	brne	.-6      	; 0x1fa4 <getNch+0x4>
}
    1faa:	cf 91       	pop	r28
  verifySpace();
    1fac:	f1 cf       	rjmp	.-30     	; 0x1f90 <verifySpace>

00001fae <appStart>:
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1fae:	28 2e       	mov	r2, r24
  watchdogConfig(WATCHDOG_OFF);
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	ea df       	rcall	.-44     	; 0x1f88 <watchdogConfig>
  __asm__ __volatile__ (
    1fb4:	e0 e0       	ldi	r30, 0x00	; 0
    1fb6:	ff 27       	eor	r31, r31
    1fb8:	09 94       	ijmp
