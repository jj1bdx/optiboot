
optiboot_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00007ffe  00007ffe  00000250  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00007fbc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000263  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000621  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002bd  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007b2  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001dc  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a5  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001929  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    7e00:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  SP=RAMEND;  // This is done by hardware reset
    7e02:	8f e5       	ldi	r24, 0x5F	; 95
    7e04:	98 e0       	ldi	r25, 0x08	; 8
    7e06:	9e bf       	out	0x3e, r25	; 62
    7e08:	8d bf       	out	0x3d, r24	; 61
   * 
   * Code by MarkG55
   * see discusion in https://github.com/Optiboot/optiboot/issues/97
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    7e0a:	84 b7       	in	r24, 0x34	; 52
#else
  ch = MCUCSR;
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    7e0c:	88 23       	and	r24, r24
    7e0e:	49 f0       	breq	.+18     	; 0x7e22 <main+0x22>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
    7e10:	98 2f       	mov	r25, r24
    7e12:	9a 70       	andi	r25, 0x0A	; 10
    7e14:	92 30       	cpi	r25, 0x02	; 2
    7e16:	29 f0       	breq	.+10     	; 0x7e22 <main+0x22>
	  if (ch & _BV(EXTRF)) {
    7e18:	81 ff       	sbrs	r24, 1
    7e1a:	02 c0       	rjmp	.+4      	; 0x7e20 <main+0x20>
	       * prevent entering bootloader.
	       * '&' operation is skipped to spare few bytes as bits in MCUSR
	       * can only be cleared.
	       */
#if !defined(__AVR_ATmega16__)
	      MCUSR = ~(_BV(WDRF));  
    7e1c:	97 ef       	ldi	r25, 0xF7	; 247
    7e1e:	94 bf       	out	0x34, r25	; 52
#else
	      MCUCSR = ~(_BV(WDRF));  
#endif
	  }
	  appStart(ch);
    7e20:	c7 d0       	rcall	.+398    	; 0x7fb0 <appStart>
      }
  }

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e22:	85 e0       	ldi	r24, 0x05	; 5
    7e24:	8e bd       	out	0x2e, r24	; 46
#endif

#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  UCSRA = _BV(U2X); //Double speed mode USART
    7e26:	82 e0       	ldi	r24, 0x02	; 2
    7e28:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    7e2a:	88 e1       	ldi	r24, 0x18	; 24
    7e2c:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    7e2e:	86 e8       	ldi	r24, 0x86	; 134
    7e30:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    7e32:	8b e0       	ldi	r24, 0x0B	; 11
    7e34:	89 b9       	out	0x09, r24	; 9
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    7e36:	8e e0       	ldi	r24, 0x0E	; 14
    7e38:	a8 d0       	rcall	.+336    	; 0x7f8a <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH) || defined(LED_START_ON)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e3a:	b8 9a       	sbi	0x17, 0	; 23
    7e3c:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    7e3e:	2d e5       	ldi	r18, 0x5D	; 93
    7e40:	3d ef       	ldi	r19, 0xFD	; 253
    TIFR1 = _BV(TOV1);
    7e42:	44 e0       	ldi	r20, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
    7e44:	51 e0       	ldi	r21, 0x01	; 1
    TCNT1 = -(F_CPU/(1024*16));
    7e46:	3d bd       	out	0x2d, r19	; 45
    7e48:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    7e4a:	48 bf       	out	0x38, r20	; 56
    while(!(TIFR1 & _BV(TOV1)));
    7e4c:	08 b6       	in	r0, 0x38	; 56
    7e4e:	02 fe       	sbrs	r0, 2
    7e50:	fd cf       	rjmp	.-6      	; 0x7e4c <main+0x4c>
    LED_PORT ^= _BV(LED);
    7e52:	98 b3       	in	r25, 0x18	; 24
    7e54:	95 27       	eor	r25, r21
    7e56:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e58:	a8 95       	wdr
    if (UART_SRA & _BV(RXC0))
    7e5a:	5f 99       	sbic	0x0b, 7	; 11
    7e5c:	02 c0       	rjmp	.+4      	; 0x7e62 <main+0x62>
    7e5e:	81 50       	subi	r24, 0x01	; 1
  } while (--count);
    7e60:	91 f7       	brne	.-28     	; 0x7e46 <main+0x46>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short(address.word);
    7e62:	23 e0       	ldi	r18, 0x03	; 3
    7e64:	e2 2e       	mov	r14, r18

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7e66:	dd 24       	eor	r13, r13
    7e68:	d3 94       	inc	r13
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    7e6a:	35 e0       	ldi	r19, 0x05	; 5
    7e6c:	c3 2e       	mov	r12, r19
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    7e6e:	41 e1       	ldi	r20, 0x11	; 17
    ch = getch();
    7e70:	b4 2e       	mov	r11, r20
    if(ch == STK_GET_PARAMETER) {
    7e72:	84 d0       	rcall	.+264    	; 0x7f7c <getch>
      unsigned char which = getch();
    7e74:	81 34       	cpi	r24, 0x41	; 65
    7e76:	79 f4       	brne	.+30     	; 0x7e96 <main+0x96>
    7e78:	81 d0       	rcall	.+258    	; 0x7f7c <getch>
      verifySpace();
    7e7a:	18 2f       	mov	r17, r24
    7e7c:	8a d0       	rcall	.+276    	; 0x7f92 <verifySpace>
      if (which == STK_SW_MINOR) {
    7e7e:	12 38       	cpi	r17, 0x82	; 130
    7e80:	11 f4       	brne	.+4      	; 0x7e86 <main+0x86>
      putch(0x00);
    7e82:	80 e0       	ldi	r24, 0x00	; 0
	  putch(optiboot_version >> 8);
    7e84:	04 c0       	rjmp	.+8      	; 0x7e8e <main+0x8e>
      } else if (which == STK_SW_MAJOR) {
    7e86:	87 e0       	ldi	r24, 0x07	; 7
	putch(0x03);
    7e88:	11 38       	cpi	r17, 0x81	; 129
    7e8a:	09 f0       	breq	.+2      	; 0x7e8e <main+0x8e>
    7e8c:	83 e0       	ldi	r24, 0x03	; 3
    putch(STK_OK);
    7e8e:	72 d0       	rcall	.+228    	; 0x7f74 <putch>
    7e90:	80 e1       	ldi	r24, 0x10	; 16
    ch = getch();
    7e92:	70 d0       	rcall	.+224    	; 0x7f74 <putch>
    else if(ch == STK_SET_DEVICE) {
    7e94:	ee cf       	rjmp	.-36     	; 0x7e72 <main+0x72>
    7e96:	82 34       	cpi	r24, 0x42	; 66
      getNch(20);
    7e98:	19 f4       	brne	.+6      	; 0x7ea0 <main+0xa0>
      getNch(5);
    7e9a:	84 e1       	ldi	r24, 0x14	; 20
    7e9c:	82 d0       	rcall	.+260    	; 0x7fa2 <getNch>
    else if(ch == STK_SET_DEVICE_EXT) {
    7e9e:	f8 cf       	rjmp	.-16     	; 0x7e90 <main+0x90>
      getNch(5);
    7ea0:	85 34       	cpi	r24, 0x45	; 69
    7ea2:	11 f4       	brne	.+4      	; 0x7ea8 <main+0xa8>
    else if(ch == STK_LOAD_ADDRESS) {
    7ea4:	85 e0       	ldi	r24, 0x05	; 5
      address.bytes[0] = getch();
    7ea6:	fa cf       	rjmp	.-12     	; 0x7e9c <main+0x9c>
    7ea8:	85 35       	cpi	r24, 0x55	; 85
    7eaa:	41 f4       	brne	.+16     	; 0x7ebc <main+0xbc>
      address.bytes[1] = getch();
    7eac:	67 d0       	rcall	.+206    	; 0x7f7c <getch>
    7eae:	c8 2f       	mov	r28, r24
      address.word *= 2; // Convert from word address to byte address
    7eb0:	65 d0       	rcall	.+202    	; 0x7f7c <getch>
    7eb2:	d8 2f       	mov	r29, r24
      verifySpace();
    7eb4:	cc 0f       	add	r28, r28
    else if(ch == STK_UNIVERSAL) {
    7eb6:	dd 1f       	adc	r29, r29
      getNch(4);
    7eb8:	6c d0       	rcall	.+216    	; 0x7f92 <verifySpace>
    7eba:	ea cf       	rjmp	.-44     	; 0x7e90 <main+0x90>
    7ebc:	86 35       	cpi	r24, 0x56	; 86
    7ebe:	19 f4       	brne	.+6      	; 0x7ec6 <main+0xc6>
    else if(ch == STK_PROG_PAGE) {
    7ec0:	84 e0       	ldi	r24, 0x04	; 4
    7ec2:	6f d0       	rcall	.+222    	; 0x7fa2 <getNch>
      GETLENGTH(length);
    7ec4:	de cf       	rjmp	.-68     	; 0x7e82 <main+0x82>
    7ec6:	84 36       	cpi	r24, 0x64	; 100
    7ec8:	09 f0       	breq	.+2      	; 0x7ecc <main+0xcc>
    7eca:	35 c0       	rjmp	.+106    	; 0x7f36 <main+0x136>
      desttype = getch();
    7ecc:	57 d0       	rcall	.+174    	; 0x7f7c <getch>
    7ece:	56 d0       	rcall	.+172    	; 0x7f7c <getch>
    7ed0:	f8 2e       	mov	r15, r24
      bufPtr = buff.bptr;
    7ed2:	54 d0       	rcall	.+168    	; 0x7f7c <getch>
    7ed4:	a8 2e       	mov	r10, r24
      while (--length);
    7ed6:	00 e6       	ldi	r16, 0x60	; 96
    7ed8:	10 e0       	ldi	r17, 0x00	; 0
    7eda:	80 e6       	ldi	r24, 0x60	; 96
      do *bufPtr++ = getch();
    7edc:	98 2e       	mov	r9, r24
    7ede:	9f 0c       	add	r9, r15
    7ee0:	4d d0       	rcall	.+154    	; 0x7f7c <getch>
    7ee2:	f8 01       	movw	r30, r16
    7ee4:	81 93       	st	Z+, r24
      while (--length);
    7ee6:	8f 01       	movw	r16, r30
    7ee8:	9e 12       	cpse	r9, r30
      verifySpace();
    7eea:	fa cf       	rjmp	.-12     	; 0x7ee0 <main+0xe0>
    7eec:	52 d0       	rcall	.+164    	; 0x7f92 <verifySpace>
    switch (memtype) {
    7eee:	f5 e4       	ldi	r31, 0x45	; 69
    7ef0:	af 12       	cpse	r10, r31
    7ef2:	01 c0       	rjmp	.+2      	; 0x7ef6 <main+0xf6>
	    ; // Error: wait for WDT
    7ef4:	ff cf       	rjmp	.-2      	; 0x7ef4 <main+0xf4>
	    __boot_page_erase_short(address.word);
    7ef6:	fe 01       	movw	r30, r28
    7ef8:	e7 be       	out	0x37, r14	; 55
    7efa:	e8 95       	spm
	    boot_spm_busy_wait();
    7efc:	07 b6       	in	r0, 0x37	; 55
    7efe:	00 fc       	sbrc	r0, 0
    7f00:	fd cf       	rjmp	.-6      	; 0x7efc <main+0xfc>
    7f02:	90 e0       	ldi	r25, 0x00	; 0
    7f04:	80 e0       	ldi	r24, 0x00	; 0
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7f06:	fe 01       	movw	r30, r28
    7f08:	e8 0f       	add	r30, r24
    7f0a:	f9 1f       	adc	r31, r25
    7f0c:	dc 01       	movw	r26, r24
    7f0e:	a0 5a       	subi	r26, 0xA0	; 160
    7f10:	bf 4f       	sbci	r27, 0xFF	; 255
    7f12:	2d 91       	ld	r18, X+
    7f14:	3c 91       	ld	r19, X
    7f16:	09 01       	movw	r0, r18
    7f18:	d7 be       	out	0x37, r13	; 55
	    } while (len -= 2);
    7f1a:	e8 95       	spm
	    __boot_page_write_short(address.word);
    7f1c:	11 24       	eor	r1, r1
    7f1e:	02 96       	adiw	r24, 0x02	; 2
    7f20:	f8 12       	cpse	r15, r24
	    boot_spm_busy_wait();
    7f22:	f1 cf       	rjmp	.-30     	; 0x7f06 <main+0x106>
    7f24:	fe 01       	movw	r30, r28
	    __boot_rww_enable_short();
    7f26:	c7 be       	out	0x37, r12	; 55
    7f28:	e8 95       	spm
#endif
	} // default block
	break;
    7f2a:	07 b6       	in	r0, 0x37	; 55
    else if(ch == STK_READ_PAGE) {
    7f2c:	00 fc       	sbrc	r0, 0
      GETLENGTH(length);
    7f2e:	fd cf       	rjmp	.-6      	; 0x7f2a <main+0x12a>
    7f30:	b7 be       	out	0x37, r11	; 55
    7f32:	e8 95       	spm
      desttype = getch();
    7f34:	ad cf       	rjmp	.-166    	; 0x7e90 <main+0x90>
    7f36:	84 37       	cpi	r24, 0x74	; 116
      verifySpace();
    7f38:	71 f4       	brne	.+28     	; 0x7f56 <main+0x156>
    7f3a:	20 d0       	rcall	.+64     	; 0x7f7c <getch>
      read_mem(desttype, address, length);
    7f3c:	1f d0       	rcall	.+62     	; 0x7f7c <getch>
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    7f3e:	f8 2e       	mov	r15, r24
    7f40:	1d d0       	rcall	.+58     	; 0x7f7c <getch>
#endif
	    putch(ch);
    7f42:	27 d0       	rcall	.+78     	; 0x7f92 <verifySpace>
    7f44:	8e 01       	movw	r16, r28
	} while (--length);
    7f46:	f8 01       	movw	r30, r16
    7f48:	85 91       	lpm	r24, Z+
    7f4a:	8f 01       	movw	r16, r30
    7f4c:	13 d0       	rcall	.+38     	; 0x7f74 <putch>
    else if(ch == STK_READ_SIGN) {
    7f4e:	fa 94       	dec	r15
    7f50:	f1 10       	cpse	r15, r1
      verifySpace();
    7f52:	f9 cf       	rjmp	.-14     	; 0x7f46 <main+0x146>
    7f54:	9d cf       	rjmp	.-198    	; 0x7e90 <main+0x90>
      putch(SIGNATURE_0);
    7f56:	85 37       	cpi	r24, 0x75	; 117
    7f58:	39 f4       	brne	.+14     	; 0x7f68 <main+0x168>
    7f5a:	1b d0       	rcall	.+54     	; 0x7f92 <verifySpace>
      putch(SIGNATURE_1);
    7f5c:	8e e1       	ldi	r24, 0x1E	; 30
    7f5e:	0a d0       	rcall	.+20     	; 0x7f74 <putch>
    7f60:	85 e9       	ldi	r24, 0x95	; 149
      putch(SIGNATURE_2);
    7f62:	08 d0       	rcall	.+16     	; 0x7f74 <putch>
    7f64:	82 e0       	ldi	r24, 0x02	; 2
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f66:	93 cf       	rjmp	.-218    	; 0x7e8e <main+0x8e>
    7f68:	81 35       	cpi	r24, 0x51	; 81
    7f6a:	09 f0       	breq	.+2      	; 0x7f6e <main+0x16e>
      watchdogConfig(WATCHDOG_16MS);
    7f6c:	a5 cf       	rjmp	.-182    	; 0x7eb8 <main+0xb8>
    7f6e:	88 e0       	ldi	r24, 0x08	; 8
    7f70:	0c d0       	rcall	.+24     	; 0x7f8a <watchdogConfig>
      verifySpace();
    7f72:	a2 cf       	rjmp	.-188    	; 0x7eb8 <main+0xb8>

00007f74 <putch>:
  while (!(UART_SRA & _BV(UDRE0)));
    7f74:	5d 9b       	sbis	0x0b, 5	; 11
    7f76:	fe cf       	rjmp	.-4      	; 0x7f74 <putch>
  UART_UDR = ch;
    7f78:	8c b9       	out	0x0c, r24	; 12
}
    7f7a:	08 95       	ret

00007f7c <getch>:
  while(!(UART_SRA & _BV(RXC0)))
    7f7c:	5f 9b       	sbis	0x0b, 7	; 11
    7f7e:	fe cf       	rjmp	.-4      	; 0x7f7c <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7f80:	5c 99       	sbic	0x0b, 4	; 11
    7f82:	01 c0       	rjmp	.+2      	; 0x7f86 <getch+0xa>
  __asm__ __volatile__ (
    7f84:	a8 95       	wdr
  ch = UART_UDR;
    7f86:	8c b1       	in	r24, 0x0c	; 12
}
    7f88:	08 95       	ret

00007f8a <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f8a:	98 e1       	ldi	r25, 0x18	; 24
    7f8c:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    7f8e:	81 bd       	out	0x21, r24	; 33
}
    7f90:	08 95       	ret

00007f92 <verifySpace>:
  if (getch() != CRC_EOP) {
    7f92:	f4 df       	rcall	.-24     	; 0x7f7c <getch>
    7f94:	80 32       	cpi	r24, 0x20	; 32
    7f96:	19 f0       	breq	.+6      	; 0x7f9e <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7f98:	88 e0       	ldi	r24, 0x08	; 8
    7f9a:	f7 df       	rcall	.-18     	; 0x7f8a <watchdogConfig>
  putch(STK_INSYNC);
    7f9c:	ff cf       	rjmp	.-2      	; 0x7f9c <verifySpace+0xa>
    7f9e:	84 e1       	ldi	r24, 0x14	; 20
void getNch(uint8_t count) {
    7fa0:	e9 cf       	rjmp	.-46     	; 0x7f74 <putch>

00007fa2 <getNch>:
    7fa2:	cf 93       	push	r28
  do getch(); while (--count);
    7fa4:	c8 2f       	mov	r28, r24
    7fa6:	ea df       	rcall	.-44     	; 0x7f7c <getch>
    7fa8:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
    7faa:	e9 f7       	brne	.-6      	; 0x7fa6 <getNch+0x4>
    7fac:	cf 91       	pop	r28
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fae:	f1 cf       	rjmp	.-30     	; 0x7f92 <verifySpace>

00007fb0 <appStart>:
  watchdogConfig(WATCHDOG_OFF);
    7fb0:	28 2e       	mov	r2, r24
    7fb2:	80 e0       	ldi	r24, 0x00	; 0
    7fb4:	ea df       	rcall	.-44     	; 0x7f8a <watchdogConfig>
  __asm__ __volatile__ (
    7fb6:	e0 e0       	ldi	r30, 0x00	; 0
    7fb8:	ff 27       	eor	r31, r31
    7fba:	09 94       	ijmp
